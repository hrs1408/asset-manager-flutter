import '../domain/entities/asset_summary.dart';
import '../domain/entities/expense_summary.dart';
import '../domain/entities/category_expense.dart';
import '../../assets/domain/entities/asset_type.dart';
import '../../expenses/domain/entities/expense_category.dart';

class DemoDashboardData {
  // Constants for consistent data
  static const double _totalExpenses = 12000000; // 12 tri·ªáu VNƒê
  static const int _totalTransactions = 45;
  
  static AssetSummary getAssetSummary() {
    const balanceByType = {
      AssetType.paymentAccount: 25000000.0, // 25 tri·ªáu
      AssetType.savingsAccount: 80000000.0, // 80 tri·ªáu
      AssetType.gold: 30000000.0, // 30 tri·ªáu
      AssetType.realEstate: 15000000.0, // 15 tri·ªáu
    };
    
    // Calculate total balance from individual balances
    final totalBalance = balanceByType.values.reduce((a, b) => a + b);
    
    return AssetSummary(
      totalBalance: totalBalance, // 150 tri·ªáu VNƒê
      totalAssets: 8,
      balanceByType: balanceByType,
      countByType: {
        AssetType.paymentAccount: 2,
        AssetType.savingsAccount: 3,
        AssetType.gold: 2,
        AssetType.realEstate: 1,
      },
    );
  }

  static ExpenseSummary getExpenseSummary() {
    final now = DateTime.now();
    final startDate = DateTime(now.year, now.month - 1, now.day);
    
    // Consistent category expenses
    const expensesByCategory = {
      'ƒÇn u·ªëng': 4500000.0,
      'Di chuy·ªÉn': 2800000.0,
      'Mua s·∫Øm': 2200000.0,
      'Gi·∫£i tr√≠': 1500000.0,
      'Kh√°c': 1000000.0,
    };
    
    // Verify total matches
    final calculatedTotal = expensesByCategory.values.reduce((a, b) => a + b);
    assert(calculatedTotal == _totalExpenses, 'Expense totals must match');
    
    return ExpenseSummary(
      totalExpenses: _totalExpenses,
      totalTransactions: _totalTransactions,
      dailyExpenses: _generateDailyExpenses(),
      expensesByCategory: expensesByCategory,
      expensesByAsset: {
        'T√†i kho·∫£n thanh to√°n': 8000000,
        'Ti·ªÅn m·∫∑t': 4000000,
      },
      startDate: startDate,
      endDate: now,
    );
  }

  static List<CategoryExpense> getCategoryExpenses() {
    final now = DateTime.now();
    final categories = [
      ExpenseCategory(
        id: '1',
        userId: 'demo_user',
        name: 'ƒÇn u·ªëng',
        description: 'Chi ph√≠ ƒÉn u·ªëng',
        icon: 'üçΩÔ∏è',
        isDefault: true,
        createdAt: now,
        updatedAt: now,
      ),
      ExpenseCategory(
        id: '2',
        userId: 'demo_user',
        name: 'Di chuy·ªÉn',
        description: 'Chi ph√≠ di chuy·ªÉn',
        icon: 'üöó',
        isDefault: true,
        createdAt: now,
        updatedAt: now,
      ),
      ExpenseCategory(
        id: '3',
        userId: 'demo_user',
        name: 'Mua s·∫Øm',
        description: 'Chi ph√≠ mua s·∫Øm',
        icon: 'üõçÔ∏è',
        isDefault: true,
        createdAt: now,
        updatedAt: now,
      ),
      ExpenseCategory(
        id: '4',
        userId: 'demo_user',
        name: 'Gi·∫£i tr√≠',
        description: 'Chi ph√≠ gi·∫£i tr√≠',
        icon: 'üéÆ',
        isDefault: true,
        createdAt: now,
        updatedAt: now,
      ),
      ExpenseCategory(
        id: '5',
        userId: 'demo_user',
        name: 'Kh√°c',
        description: 'Chi ph√≠ kh√°c',
        icon: 'üì¶',
        isDefault: true,
        createdAt: now,
        updatedAt: now,
      ),
    ];

    // Consistent expense data with calculated percentages
    final expenseData = [
      {'amount': 4500000.0, 'transactions': 18}, // ƒÇn u·ªëng
      {'amount': 2800000.0, 'transactions': 12}, // Di chuy·ªÉn  
      {'amount': 2200000.0, 'transactions': 8},  // Mua s·∫Øm
      {'amount': 1500000.0, 'transactions': 5},  // Gi·∫£i tr√≠
      {'amount': 1000000.0, 'transactions': 2},  // Kh√°c
    ];
    
    // Verify transaction count matches
    final totalTransactionCount = expenseData.map((e) => e['transactions'] as int).reduce((a, b) => a + b);
    assert(totalTransactionCount == _totalTransactions, 'Transaction counts must match');

    return expenseData.asMap().entries.map((entry) {
      final index = entry.key;
      final data = entry.value;
      final amount = data['amount'] as double;
      final transactions = data['transactions'] as int;
      final percentage = (amount / _totalExpenses) * 100;
      
      return CategoryExpense(
        category: categories[index],
        totalAmount: amount,
        transactionCount: transactions,
        percentage: percentage,
      );
    }).toList();
  }

  static List<DemoTransaction> getRecentTransactions() {
    final now = DateTime.now();
    
    return [
      DemoTransaction(
        id: '1',
        description: 'C√† ph√™ Highlands Coffee',
        amount: 85000,
        date: now.subtract(const Duration(hours: 2)),
        category: 'ƒÇn u·ªëng',
      ),
      DemoTransaction(
        id: '2',
        description: 'Grab ƒëi l√†m v·ªÅ',
        amount: 45000,
        date: now.subtract(const Duration(hours: 8)),
        category: 'Di chuy·ªÉn',
      ),
      DemoTransaction(
        id: '3',
        description: 'C∆°m tr∆∞a qu√°n c∆°m',
        amount: 120000,
        date: now.subtract(const Duration(days: 1)),
        category: 'ƒÇn u·ªëng',
      ),
      DemoTransaction(
        id: '4',
        description: 'Xem phim CGV Vincom',
        amount: 180000,
        date: now.subtract(const Duration(days: 1, hours: 5)),
        category: 'Gi·∫£i tr√≠',
      ),
      DemoTransaction(
        id: '5',
        description: '√Åo thun Uniqlo',
        amount: 350000,
        date: now.subtract(const Duration(days: 2)),
        category: 'Mua s·∫Øm',
      ),
      DemoTransaction(
        id: '6',
        description: 'XƒÉng xe m√°y',
        amount: 120000,
        date: now.subtract(const Duration(days: 2, hours: 3)),
        category: 'Di chuy·ªÉn',
      ),
      DemoTransaction(
        id: '7',
        description: 'T·∫°p h√≥a mua ƒë·ªì ƒÉn',
        amount: 250000,
        date: now.subtract(const Duration(days: 3)),
        category: 'ƒÇn u·ªëng',
      ),
      DemoTransaction(
        id: '8',
        description: 'Game Steam',
        amount: 300000,
        date: now.subtract(const Duration(days: 3, hours: 12)),
        category: 'Gi·∫£i tr√≠',
      ),
    ];
  }

  static Map<DateTime, double> _generateDailyExpenses() {
    final Map<DateTime, double> expenses = {};
    final now = DateTime.now();
    
    // Generate 30 days of expenses that sum to _totalExpenses
    final dailyAverage = _totalExpenses / 30;
    double runningTotal = 0;
    
    for (int i = 29; i >= 0; i--) {
      final date = DateTime(now.year, now.month, now.day - i);
      
      // Vary expenses by day of week (higher on weekends)
      final dayOfWeek = date.weekday;
      double multiplier = 1.0;
      
      if (dayOfWeek == DateTime.saturday || dayOfWeek == DateTime.sunday) {
        multiplier = 1.4; // 40% higher on weekends
      } else if (dayOfWeek == DateTime.friday) {
        multiplier = 1.2; // 20% higher on Friday
      } else if (dayOfWeek == DateTime.monday) {
        multiplier = 0.8; // 20% lower on Monday
      }
      
      // Add some randomness
      final randomFactor = 0.7 + (0.6 * (i % 7) / 7); // 0.7 to 1.3
      
      double amount = dailyAverage * multiplier * randomFactor;
      
      // Ensure we don't exceed total budget
      if (i == 0) {
        // Last day - use remaining budget
        amount = _totalExpenses - runningTotal;
        if (amount < 0) amount = 50000; // Minimum amount
      } else {
        // Adjust amount to stay within budget
        final remainingBudget = _totalExpenses - runningTotal;
        final remainingDays = i;
        final maxAllowedToday = remainingBudget - (remainingDays * 50000); // Reserve 50k for each remaining day
        
        if (amount > maxAllowedToday && maxAllowedToday > 50000) {
          amount = maxAllowedToday;
        }
        
        runningTotal += amount;
      }
      
      expenses[date] = amount.clamp(50000, 800000); // Min 50k, Max 800k per day
    }
    
    return expenses;
  }
}

class DemoTransaction {
  final String id;
  final String description;
  final double amount;
  final DateTime date;
  final String category;

  DemoTransaction({
    required this.id,
    required this.description,
    required this.amount,
    required this.date,
    required this.category,
  });
}