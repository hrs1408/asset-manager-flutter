import 'package:dartz/dartz.dart';
import '../../../../core/error/failures.dart';
import '../../../../core/usecases/usecase.dart';
import '../entities/expense_category.dart';
import '../repositories/category_repository.dart';

class CreateCategoryUseCase implements UseCase<ExpenseCategory, CreateCategoryParams> {
  final CategoryRepository repository;

  CreateCategoryUseCase(this.repository);

  @override
  Future<Either<Failure, ExpenseCategory>> call(CreateCategoryParams params) async {
    final category = ExpenseCategory(
      id: '', // Will be generated by Firestore
      userId: params.userId,
      name: params.name,
      description: params.description,
      icon: params.icon,
      isDefault: false,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    return await repository.createCategory(category);
  }
}

class CreateCategoryParams {
  final String userId;
  final String name;
  final String description;
  final String icon;

  CreateCategoryParams({
    required this.userId,
    required this.name,
    required this.description,
    required this.icon,
  });
}